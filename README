# Email Spam Analysis Using Convolutional Neural Networks (CNNs)

## Overview

This project focuses on the analysis and classification of email spam using three different Convolutional Neural Network (CNN) models. The goal is to compare the performance of these models and determine the most effective one for spam detection.

## Table of Contents

- [Introduction](#introduction)
- [Dataset](#dataset)
- [Models](#models)
- [Installation](#installation)
- [Usage](#usage)
- [Results](#results)
- [Contributing](#contributing)
- [License](#license)

## Introduction

Spam emails are unsolicited messages often sent in bulk for advertising purposes. They can be annoying and sometimes harmful. This project utilizes CNNs, which are typically used in image processing, to classify text data into spam and non-spam categories. The three CNN models explored in this project include:

1. Simple CNN
2. Moderate CNN
3. Complex CNN

## Dataset

The dataset used for this project is the **Enron Email Dataset**. It consists of labeled spam and non-spam emails.

- Download the dataset from [here](https://www.kaggle.com/wcukierski/enron-email-dataset).

## Models

### 1. Simple CNN: 
A straightforward Convolutional Neural Network (CNN) with GlobalMaxPooling1D

### 2. Moderate CNN
Combines Convolutional Neural Network (CNN) with GlobalMaxPooling1D and Additional Dense Layer with Dropout Layer.

### 3. Complex CNN
Combines Moderate CNN with Bidirectional LSTM and GlobalMaxPooling1D layers.

## Installation

1. Clone the repository:
    ```sh
    git clone https://github.com/yourusername/email-spam-cnn.git
    cd email-spam-cnn
    ```

2. Create and activate a virtual environment:
    ```sh
    python -m venv venv
    source venv/bin/activate  # On Windows use `venv\Scripts\activate`
    ```

3. Install the required packages:
    ```sh
    pip install -r requirements.txt
    ```

## Usage

1. **Preprocess the data:**
    ```sh
    python preprocess_data.py --input data/enron.csv --output data/processed_data.csv
    ```

2. **Train the models:**
    ```sh
    python train_model.py --model simple_cnn --data data/processed_data.csv
    python train_model.py --model cnn_lstm --data data/processed_data.csv
    python train_model.py --model cnn_gru --data data/processed_data.csv
    ```

3. **Evaluate the models:**
    ```sh
    python evaluate_model.py --model simple_cnn --data data/processed_data.csv
    python evaluate_model.py --model cnn_lstm --data data/processed_data.csv
    python evaluate_model.py --model cnn_gru --data data/processed_data.csv
    ```

## Results

The performance of each model is evaluated using accuracy, precision, recall, and F1-score. The results are summarized as follows:

| Model         | Accuracy  | Precision | Recall | F1-score |
|---------------|-----------|-----------|--------|----------|
| Simple CNN    | 0.983     | 0.96      | 0.90   | 1        |
| Moderate CNN  | 0.980     | 0.91      | 0.93   | 1        |
| Complex CNN   | 0.986     | 0.95      | 0.93   | 1        |


## Contributing

Contributions are welcome! Please open an issue or submit a pull request for any improvements or new features.

1. Fork the project.
2. Create your feature branch (`git checkout -b feature/AmazingFeature`).
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`).
4. Push to the branch (`git push origin feature/AmazingFeature`).
5. Open a pull request.

## License

Distributed under the MIT License. See `LICENSE` for more information.
This template includes sections typically found in GitHub README files and is tailored for a project focusing on email spam analysis using three CNN models. Feel free to adjust the content to better fit your specific project details.

provide name and description for repository
ChatGPT
Sure, here are the name and description for the repository:

Repository Name: email-spam-cnn-analysis

Repository Description:

This repository contains a comprehensive analysis and classification project for email spam detection using three different Convolutional Neural Network (CNN) models. By leveraging the Enron Email Dataset, we implement and compare a Simple CNN, Moderate CNN, and a Complex CNN to determine the most effective model for spam classification. The project includes data preprocessing, model training, evaluation scripts, and detailed results.
Feel free to modify the name and description to better align with your project's goals or specifics.

create readme description part for the prerequestive of following python libraries fro the project  python -m venv .venv
.\.venv\Scripts\activate
2. open the working env on this venv (ctrl+shift+p and select from that)
pip install numpy
pip install pandas
pip install tensorflow
pip install -U scikit-learn
pip install seaborn

ChatGPT
Certainly! Here is the README description section for the prerequisites and setup of the required Python libraries for the project:

markdown
Copy code
## Prerequisites

Before running the project, ensure you have the following Python libraries installed. Follow the steps below to set up your virtual environment and install the necessary dependencies.

### Setting Up the Virtual Environment

1. **Create a virtual environment:**
    ```sh
    python -m venv .venv
    ```

2. **Activate the virtual environment:**
    - On Windows:
      ```sh
      .\.venv\Scripts\activate
      ```
    - On macOS and Linux:
      ```sh
      source .venv/bin/activate
      ```

3. **Open the working environment in your virtual environment:**
    - Press `Ctrl+Shift+P` in your code editor (e.g., Visual Studio Code).
    - Select `Python: Select Interpreter`.
    - Choose the interpreter from the virtual environment (`.venv`).

### Installing Required Libraries

Once the virtual environment is activated, install the necessary Python libraries:

1. **Install NumPy:**
    ```sh
    pip install numpy
    ```

2. **Install pandas:**
    ```sh
    pip install pandas
    ```

3. **Install TensorFlow:**
    ```sh
    pip install tensorflow
    ```

4. **Install scikit-learn:**
    ```sh
    pip install -U scikit-learn
    ```

5. **Install seaborn:**
    ```sh
    pip install seaborn
    ```

By following these steps, you will have all the required libraries installed in your virtual environment, ready to run the project.